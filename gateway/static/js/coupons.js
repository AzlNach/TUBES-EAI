/**
 * Coupons Page JavaScript
 * Konsisten dengan schema.py GraphQL types dan coupon-service schema
 * 
 * Schema mappings yang HARUS diikuti dari gateway/schema.py:
 * - CouponType: { id, code, name, discountPercentage, validUntil, isActive, createdAt, isAutoGenerated, usedByUserId, couponType }
 * - LoyaltyInfoType: { totalPayments, generatedCoupons, nextRewardAt, progressCurrent, progressMax, progressPercentage }
 * - Query: { my_coupons, my_loyalty_info }
 * - Mutation: { use_coupon }
 */

// KONSISTEN DENGAN SCHEMA.PY - Field names sesuai gateway schema
const COUPON_FIELDS = {
    id: 'id',
    code: 'code',
    name: 'name',
    discountPercentage: 'discountPercentage',
    validUntil: 'validUntil',
    isActive: 'isActive',
    createdAt: 'createdAt',
    isAutoGenerated: 'isAutoGenerated',
    usedByUserId: 'usedByUserId',
    couponType: 'couponType'
};

const LOYALTY_FIELDS = {
    totalPayments: 'totalPayments',
    generatedCoupons: 'generatedCoupons',
    nextRewardAt: 'nextRewardAt',
    progressCurrent: 'progressCurrent',
    progressMax: 'progressMax',
    progressPercentage: 'progressPercentage'
};

// GraphQL Queries sesuai gateway/schema.py - AUTHENTICATED ACCESS REQUIRED
const COUPON_QUERIES = {
    GET_MY_COUPONS: `
        query GetMyCoupons {
            myCoupons {
                id
                code
                name
                discountPercentage
                validUntil
                isActive
                createdAt
                isAutoGenerated
                usedByUserId
                couponType
            }
        }
    `,
    GET_MY_LOYALTY_INFO: `
        query GetMyLoyaltyInfo {
            myLoyaltyInfo {
                totalPayments
                generatedCoupons
                nextRewardAt
                progressCurrent
                progressMax
                progressPercentage
            }
        }
    `,
    // Add direct payment query for debugging
    GET_MY_PAYMENTS_DEBUG: `
        query GetMyPaymentsDebug {
            myPayments {
                id
                userId
                bookingId
                amount
                paymentMethod
                status
                paymentProofImage
                createdAt
            }
        }
    `
};

const COUPON_MUTATIONS = {
    USE_COUPON: `
        mutation UseCoupon($code: String!, $bookingAmount: Float!) {
            useCoupon(code: $code, bookingAmount: $bookingAmount) {
                success
                message
                discountAmount
            }
        }
    `
};

// Global state variables
let allCoupons = [];
let filteredCoupons = [];
let loyaltyInfo = null;
let currentPage = 1;
const couponsPerPage = 12;
let currentFilters = {
    status: '',
    type: '',
    search: '',
    sort: 'created-desc'
};
let isLoggedIn = false;

// DOM Elements cache
let elements = {};

// DOM ready initialization
document.addEventListener('DOMContentLoaded', function() {
    console.log('Coupons page initializing...');
    
    // Cache DOM elements
    cacheElements();
    
    // Initialize authentication state
    isLoggedIn = AuthService.isLoggedIn();
    updateNavigation();
    
    // Check if user is logged in
    if (!isLoggedIn) {
        console.log('User not logged in, redirecting to login...');
        showLoginRequired();
        return;
    }
    
    // Initialize page
    initializeCouponsPage();
    
    console.log('Coupons page initialized successfully');
});

// Cache frequently used DOM elements
function cacheElements() {
    elements = {
        // Containers
        loadingContainer: document.getElementById('loading-container'),
        couponsGrid: document.getElementById('coupons-grid'),
        emptyState: document.getElementById('empty-state'),
        errorState: document.getElementById('error-state'),
        paginationContainer: document.getElementById('pagination-container'),
        
        // Loyalty section
        loyaltyProgressBar: document.getElementById('loyalty-progress-bar'),
        paymentProgress: document.getElementById('payment-progress'),
        totalPaymentsCount: document.getElementById('total-payments-count'),
        generatedCouponsCount: document.getElementById('generated-coupons-count'),
        nextRewardInfo: document.getElementById('next-reward-info'),
        
        // Filters
        statusFilter: document.getElementById('status-filter'),
        typeFilter: document.getElementById('type-filter'),
        couponSearch: document.getElementById('coupon-search'),
        sortFilter: document.getElementById('sort-filter'),
        clearSearch: document.getElementById('clear-search'),
        clearFiltersBtn: document.getElementById('clear-filters-btn'),
        
        // Pagination
        paginationInfo: document.getElementById('pagination-info'),
        paginationControls: document.getElementById('pagination-controls'),
        showingStart: document.getElementById('showing-start'),
        showingEnd: document.getElementById('showing-end'),
        totalCoupons: document.getElementById('total-coupons'),
        couponCount: document.getElementById('coupon-count'),
        
        // Modals
        couponDetailModal: document.getElementById('couponDetailModal'),
        modalCouponDetailContent: document.getElementById('modal-coupon-detail-content'),
        copyCouponCodeBtn: document.getElementById('copy-coupon-code-btn'),
        useCouponBtn: document.getElementById('use-coupon-btn'),
        
        useCouponModal: document.getElementById('useCouponModal'),
        modalUseCouponContent: document.getElementById('modal-use-coupon-content'),
        confirmUseCouponBtn: document.getElementById('confirm-use-coupon-btn'),
        
        // Error handling
        errorMessage: document.getElementById('error-message'),
        retryLoadBtn: document.getElementById('retry-load')
    };
}

// Initialize the coupons page
function initializeCouponsPage() {
    try {
        // Setup event listeners
        setupEventListeners();
        
        // Load data
        loadCouponsData();
        loadLoyaltyInfo();
        
    } catch (error) {
        console.error('Error initializing coupons page:', error);
        showErrorState('Failed to initialize coupons page. Please refresh and try again.');
    }
}

// Setup all event listeners
function setupEventListeners() {
    // Filter event listeners
    if (elements.statusFilter) {
        elements.statusFilter.addEventListener('change', handleFilterChange);
    }
    
    if (elements.typeFilter) {
        elements.typeFilter.addEventListener('change', handleFilterChange);
    }
    
    if (elements.couponSearch) {
        elements.couponSearch.addEventListener('input', debounce(handleSearchInput, 300));
    }
    
    if (elements.sortFilter) {
        elements.sortFilter.addEventListener('change', handleFilterChange);
    }
    
    if (elements.clearSearch) {
        elements.clearSearch.addEventListener('click', clearSearch);
    }
    
    if (elements.clearFiltersBtn) {
        elements.clearFiltersBtn.addEventListener('click', clearAllFilters);
    }
    
    // Modal event listeners
    if (elements.copyCouponCodeBtn) {
        elements.copyCouponCodeBtn.addEventListener('click', copyCouponCode);
    }
    
    if (elements.useCouponBtn) {
        elements.useCouponBtn.addEventListener('click', showUseCouponModal);
    }
    
    if (elements.confirmUseCouponBtn) {
        elements.confirmUseCouponBtn.addEventListener('click', processUseCoupon);
    }
    
    // Retry button
    if (elements.retryLoadBtn) {
        elements.retryLoadBtn.addEventListener('click', () => {
            loadCouponsData();
            loadLoyaltyInfo();
        });
    }
}

// Load coupons data from API
async function loadCouponsData() {
    try {
        showLoadingState();
        
        console.log('Loading coupons data from GraphQL API...');
        
        const result = await AuthService.graphqlRequest(COUPON_QUERIES.GET_MY_COUPONS, {}, true);
        
        console.log('Coupons result:', result);
        
        if (result.errors) {
            console.error('GraphQL errors:', result.errors);
            throw new Error(result.errors[0].message);
        }
        
        if (!result.data) {
            throw new Error('No data received from coupon service');
        }
        
        const coupons = result.data?.myCoupons || [];
        
        console.log('Raw coupons loaded:', coupons.length);
        
        if (coupons && coupons.length > 0) {
            allCoupons = coupons;
            
            // Update coupon count
            updateCouponCount(allCoupons.length);
            
            // Apply initial filters and render
            applyFilters();
            
        } else {
            console.warn('No coupons data received');
            allCoupons = [];
            updateCouponCount(0);
            showEmptyState();
        }
        
    } catch (error) {
        console.error('Error loading coupons:', error);
        
        if (error.name === 'NetworkError' || error.message.includes('fetch')) {
            showErrorState('Network error. Please check your connection and try again.');
        } else if (error.message.includes('authentication') || error.message.includes('token')) {
            showErrorState('Authentication error. Please login again.');
            setTimeout(() => {
                AuthService.logout();
                window.location.href = '/login';
            }, 2000);
        } else {
            showErrorState(error.message || 'Failed to load coupons. Please try again.');
        }
    }
}

// Load loyalty information
async function loadLoyaltyInfo() {
    try {
        console.log('Loading loyalty info from GraphQL API...');
        
        const result = await AuthService.graphqlRequest(COUPON_QUERIES.GET_MY_LOYALTY_INFO, {}, true);
        
        console.log('Loyalty info result:', result);
        
        if (result.errors) {
            console.error('Loyalty info errors:', result.errors);
            loyaltyInfo = getDefaultLoyaltyInfo();
        } else if (result.data && result.data.myLoyaltyInfo) {
            loyaltyInfo = result.data.myLoyaltyInfo;
            console.log('Loyalty info loaded:', loyaltyInfo);
            
            // AUTO TRIGGER: If user has 3+ payments but 0 generated coupons, trigger generation
            if (loyaltyInfo.totalPayments >= 3 && loyaltyInfo.generatedCoupons === 0) {
                console.log('🚀 Auto-triggering coupon generation for 3+ payments...');
                
                try {
                    // FIXED: Get current user ID from token instead of hardcoding
                    const currentUser = AuthService.getUser();
                    const userId = currentUser ? currentUser.id : null;
                    
                    if (!userId) {
                        console.log('⚠️ No user ID found, skipping auto-generation');
                        return;
                    }
                    
                    console.log(`🎯 Generating coupon for user ID: ${userId} with ${loyaltyInfo.totalPayments} payments`);
                    
                    // FIXED: Use dynamic userId from logged-in user
                    const generateResult = await AuthService.graphqlRequest(`
                        mutation {
                            generateLoyaltyCoupon(userId: ${userId}, bookingCount: ${loyaltyInfo.totalPayments}) {
                                coupon {
                                    id
                                    code
                                    name
                                    discountPercentage
                                    validUntil
                                    isActive
                                    isAutoGenerated
                                }
                                success
                                message
                            }
                        }
                    `, {}, true);
                    
                    if (generateResult.data?.generateLoyaltyCoupon?.success) {
                        console.log('✅ Auto-generated coupon successfully!');
                        console.log('Generated coupon:', generateResult.data.generateLoyaltyCoupon.coupon);
                        
                        // Reload loyalty info and coupons to update counts
                        setTimeout(() => {
                            loadLoyaltyInfo();
                            loadCouponsData(); // Also reload coupons to show new one
                        }, 1000);
                        return; // Exit early, akan reload
                    } else {
                        console.log('⚠️ Auto-generation failed:', generateResult.data?.generateLoyaltyCoupon?.message);
                    }
                } catch (autoGenError) {
                    console.log('Auto-generation error, continuing with normal flow:', autoGenError);
                }
            }
            
        } else {
            loyaltyInfo = getDefaultLoyaltyInfo();
        }
        
        // Update display
        updateLoyaltyDisplay();
        
    } catch (error) {
        console.error('Error loading loyalty info:', error);
        loyaltyInfo = getDefaultLoyaltyInfo();
        updateLoyaltyDisplay();
    }
}

// Get default loyalty info
function getDefaultLoyaltyInfo() {
    return {
        totalPayments: 0,
        generatedCoupons: 0,
        nextRewardAt: 3,
        progressCurrent: 0,
        progressMax: 3,
        progressPercentage: 0
    };
}

// Update loyalty display
function updateLoyaltyDisplay() {
    if (!loyaltyInfo) return;
    
    try {
        console.log('Updating loyalty display with:', loyaltyInfo);
        
        // Update progress bar
        if (elements.loyaltyProgressBar) {
            elements.loyaltyProgressBar.style.width = `${loyaltyInfo.progressPercentage}%`;
            elements.loyaltyProgressBar.setAttribute('aria-valuenow', loyaltyInfo.progressPercentage);
            
            // Add completion styling if 100%
            if (loyaltyInfo.progressPercentage >= 100) {
                elements.loyaltyProgressBar.classList.add('bg-success');
                elements.loyaltyProgressBar.classList.remove('bg-primary');
            } else {
                elements.loyaltyProgressBar.classList.add('bg-primary');
                elements.loyaltyProgressBar.classList.remove('bg-success');
            }
        }
        
        // Update progress text
        if (elements.paymentProgress) {
            elements.paymentProgress.textContent = `${loyaltyInfo.progressCurrent} / ${loyaltyInfo.progressMax} payments`;
        }
        
        // Update stats
        if (elements.totalPaymentsCount) {
            elements.totalPaymentsCount.textContent = loyaltyInfo.totalPayments;
        }
        
        if (elements.generatedCouponsCount) {
            elements.generatedCouponsCount.textContent = loyaltyInfo.generatedCoupons;
        }
        
        // Update next reward info with better messaging
        if (elements.nextRewardInfo) {
            if (loyaltyInfo.totalPayments >= 3 && loyaltyInfo.progressPercentage >= 100) {
                // User sudah dapat reward pertama
                elements.nextRewardInfo.innerHTML = `
                    <small class="text-success">
                        <i class="fas fa-check-circle me-1"></i>
                        Milestone completed! Next reward at ${loyaltyInfo.nextRewardAt} payments
                    </small>
                `;
            } else if (loyaltyInfo.progressPercentage >= 100) {
                // Progress full tapi belum generate
                elements.nextRewardInfo.innerHTML = `
                    <small class="text-warning">
                        <i class="fas fa-gift me-1"></i>
                        Reward earned! Coupon will be generated shortly...
                    </small>
                `;
            } else {
                // Masih dalam progress
                const remaining = loyaltyInfo.progressMax - loyaltyInfo.progressCurrent;
                elements.nextRewardInfo.innerHTML = `
                    <small class="text-muted">
                        <i class="fas fa-clock me-1"></i>
                        ${remaining} more payment${remaining > 1 ? 's' : ''} to next reward
                    </small>
                `;
            }
        }
        
        // Update loyalty section title based on progress
        const loyaltyTitle = document.querySelector('.loyalty-title');
        if (loyaltyTitle && loyaltyInfo.totalPayments >= 3) {
            loyaltyTitle.innerHTML = `
                <i class="fas fa-trophy me-2"></i>
                Loyalty Rewards Program 
                <span class="badge bg-success ms-2">Milestone Reached!</span>
            `;
        }
        
    } catch (error) {
        console.error('Error updating loyalty display:', error);
    }
}

// Show loading state
function showLoadingState() {
    elements.loadingContainer.style.display = 'block';
    elements.couponsGrid.style.display = 'none';
    elements.emptyState.style.display = 'none';
    elements.errorState.style.display = 'none';
    elements.paginationContainer.style.display = 'none';
}

// Show error state
function showErrorState(message = 'An error occurred') {
    elements.loadingContainer.style.display = 'none';
    elements.couponsGrid.style.display = 'none';
    elements.emptyState.style.display = 'none';
    elements.errorState.style.display = 'block';
    elements.paginationContainer.style.display = 'none';
    
    if (elements.errorMessage) {
        elements.errorMessage.textContent = message;
    }
}

// Show empty state
function showEmptyState() {
    elements.loadingContainer.style.display = 'none';
    elements.couponsGrid.style.display = 'none';
    elements.emptyState.style.display = 'block';
    elements.errorState.style.display = 'none';
    elements.paginationContainer.style.display = 'none';
}

// Update coupon count badge
function updateCouponCount(count) {
    if (elements.couponCount) {
        elements.couponCount.innerHTML = `<i class="fas fa-tags me-1"></i>${count} Coupon${count !== 1 ? 's' : ''}`;
    }
}

// Handle filter changes
function handleFilterChange() {
    currentPage = 1;
    applyFilters();
}

// Handle search input with debouncing
function handleSearchInput() {
    const searchValue = elements.couponSearch.value.trim();
    
    // Show/hide clear search button
    if (searchValue) {
        elements.clearSearch.style.display = 'block';
    } else {
        elements.clearSearch.style.display = 'none';
    }
    
    currentPage = 1;
    applyFilters();
}

// Clear search
function clearSearch() {
    elements.couponSearch.value = '';
    elements.clearSearch.style.display = 'none';
    handleFilterChange();
}

// Apply all filters
function applyFilters() {
    // Update current filters
    currentFilters.status = elements.statusFilter.value;
    currentFilters.type = elements.typeFilter.value;
    currentFilters.search = elements.couponSearch.value.toLowerCase().trim();
    currentFilters.sort = elements.sortFilter.value;
    
    // Filter coupons
    filteredCoupons = filterCoupons(allCoupons, currentFilters);
    
    // Sort coupons
    filteredCoupons = sortCoupons(filteredCoupons, currentFilters.sort);
    
    // Render coupons
    renderCoupons();
}

// Filter coupons based on criteria
function filterCoupons(coupons, filters) {
    return coupons.filter(coupon => {
        // Status filter
        if (filters.status) {
            const couponStatus = getCouponStatus(coupon);
            if (couponStatus !== filters.status) return false;
        }
        
        // Type filter
        if (filters.type) {
            if (coupon.couponType !== filters.type) return false;
        }
        
        // Search filter
        if (filters.search) {
            const searchTerm = filters.search.toLowerCase();
            const matchesCode = coupon.code.toLowerCase().includes(searchTerm);
            const matchesName = coupon.name.toLowerCase().includes(searchTerm);
            if (!matchesCode && !matchesName) return false;
        }
        
        return true;
    });
}

// Sort coupons based on criteria
function sortCoupons(coupons, sortBy) {
    return [...coupons].sort((a, b) => {
        switch (sortBy) {
            case 'created-desc':
                return new Date(b.createdAt) - new Date(a.createdAt);
            case 'created-asc':
                return new Date(a.createdAt) - new Date(b.createdAt);
            case 'expiry-asc':
                return new Date(a.validUntil) - new Date(b.validUntil);
            case 'discount-desc':
                return b.discountPercentage - a.discountPercentage;
            case 'status':
                const statusA = getCouponStatus(a);
                const statusB = getCouponStatus(b);
                return statusA.localeCompare(statusB);
            default:
                return 0;
        }
    });
}

// Clear all filters
function clearAllFilters() {
    elements.statusFilter.value = '';
    elements.typeFilter.value = '';
    elements.couponSearch.value = '';
    elements.sortFilter.value = 'created-desc';
    elements.clearSearch.style.display = 'none';
    
    currentPage = 1;
    applyFilters();
}

// Render coupons based on current view and pagination
function renderCoupons() {
    if (filteredCoupons.length === 0) {
        showEmptyState();
        return;
    }
    
    // Calculate pagination
    const totalCoupons = filteredCoupons.length;
    const totalPages = Math.ceil(totalCoupons / couponsPerPage);
    const startIndex = (currentPage - 1) * couponsPerPage;
    const endIndex = Math.min(startIndex + couponsPerPage, totalCoupons);
    const paginatedCoupons = filteredCoupons.slice(startIndex, endIndex);
    
    // Show coupons grid
    elements.loadingContainer.style.display = 'none';
    elements.couponsGrid.style.display = 'flex';
    elements.emptyState.style.display = 'none';
    elements.errorState.style.display = 'none';
    
    // Clear existing content
    elements.couponsGrid.innerHTML = '';
    
    // Create coupon cards
    paginatedCoupons.forEach((coupon, index) => {
        const couponCard = createCouponCard(coupon, index);
        elements.couponsGrid.appendChild(couponCard);
    });
    
    // Update pagination
    updatePagination(startIndex + 1, endIndex, totalCoupons, totalPages);
}

// Create coupon card
function createCouponCard(coupon, index) {
    const col = document.createElement('div');
    col.className = 'col-lg-4 col-md-6 mb-4';
    
    // Get coupon status and styling
    const status = getCouponStatus(coupon);
    const statusBadge = getStatusBadge(status);
    const statusClass = getStatusClass(status);
    
    // Format dates
    const createdDate = coupon.createdAt ? new Date(coupon.createdAt) : null;
    const createdDateDisplay = createdDate ? createdDate.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    }) : 'N/A';
    
    const expiryDate = coupon.validUntil ? new Date(coupon.validUntil) : null;
    const expiryDateDisplay = expiryDate ? expiryDate.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    }) : 'N/A';
    
    // Get coupon type icon and color
    const typeInfo = getCouponTypeInfo(coupon.couponType || 'special');
    
    // Calculate days until expiry
    const daysUntilExpiry = expiryDate ? Math.ceil((expiryDate - new Date()) / (1000 * 60 * 60 * 24)) : 0;
    const urgencyClass = daysUntilExpiry <= 7 && daysUntilExpiry > 0 ? 'text-warning' : 
                        daysUntilExpiry <= 0 ? 'text-danger' : 'text-muted';
    
    col.innerHTML = `
        <div class="card coupon-card h-100 ${statusClass}" data-coupon-id="${coupon.id}">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div class="coupon-type">
                    <i class="${typeInfo.icon} me-2 ${typeInfo.color}"></i>
                    <span class="fw-semibold">${typeInfo.label}</span>
                </div>
                ${statusBadge}
            </div>
            <div class="card-body">
                <div class="coupon-discount text-center mb-3">
                    <div class="discount-value">${coupon.discountPercentage}%</div>
                    <div class="discount-label">OFF</div>
                </div>
                <h5 class="coupon-name text-center mb-3">${coupon.name}</h5>
                <div class="coupon-code-display text-center mb-3">
                    <div class="code-label">Coupon Code</div>
                    <div class="code-value">${coupon.code}</div>
                </div>
                <div class="coupon-details">
                    <div class="detail-row">
                        <i class="fas fa-calendar-plus text-muted me-2"></i>
                        <span class="detail-label">Created:</span>
                        <span class="detail-value">${createdDateDisplay}</span>
                    </div>
                    <div class="detail-row">
                        <i class="fas fa-calendar-times ${urgencyClass} me-2"></i>
                        <span class="detail-label">Expires:</span>
                        <span class="detail-value ${urgencyClass}">${expiryDateDisplay}</span>
                    </div>
                    ${daysUntilExpiry > 0 ? `
                        <div class="detail-row">
                            <i class="fas fa-clock ${urgencyClass} me-2"></i>
                            <span class="detail-label">Time left:</span>
                            <span class="detail-value ${urgencyClass}">${daysUntilExpiry} day${daysUntilExpiry !== 1 ? 's' : ''}</span>
                        </div>
                    ` : ''}
                </div>
            </div>
            <div class="card-footer">
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary btn-sm flex-fill" onclick="showCouponDetail(${coupon.id})">
                        <i class="fas fa-eye me-1"></i>Details
                    </button>
                    ${status === 'active' ? `
                        <button class="btn btn-primary btn-sm flex-fill" onclick="showUseCouponForm(${coupon.id})">
                            <i class="fas fa-gift me-1"></i>Use Now
                        </button>
                    ` : `
                        <button class="btn btn-secondary btn-sm flex-fill" disabled>
                            <i class="fas fa-ban me-1"></i>${status === 'used' ? 'Used' : 'Expired'}
                        </button>
                    `}
                </div>
            </div>
        </div>
    `;
    
    return col;
}

// Get coupon status
function getCouponStatus(coupon) {
    if (coupon.usedByUserId) return 'used';
    if (!coupon.isActive) return 'expired';
    
    const expiryDate = coupon.validUntil ? new Date(coupon.validUntil) : null;
    if (expiryDate && expiryDate < new Date()) return 'expired';
    
    return 'active';
}

// Get status badge HTML
function getStatusBadge(status) {
    switch (status) {
        case 'active':
            return '<span class="badge bg-success">Active</span>';
        case 'used':
            return '<span class="badge bg-secondary">Used</span>';
        case 'expired':
            return '<span class="badge bg-danger">Expired</span>';
        default:
            return '<span class="badge bg-secondary">Unknown</span>';
    }
}

// Get status class for card styling
function getStatusClass(status) {
    switch (status) {
        case 'active':
            return 'coupon-active';
        case 'used':
            return 'coupon-used';
        case 'expired':
            return 'coupon-expired';
        default:
            return '';
    }
}
// Get coupon type information
function getCouponTypeInfo(type) {
    switch (type) {
        case 'loyalty':
            return {
                icon: 'fas fa-trophy',
                color: 'text-warning',
                label: 'Loyalty Reward'
            };
        case 'promotional':
            return {
                icon: 'fas fa-bullhorn',
                color: 'text-info',
                label: 'Promotional'
            };
        case 'special':
            return {
                icon: 'fas fa-star',
                color: 'text-success',
                label: 'Special Offer'
            };
        default:
            return {
                icon: 'fas fa-tag',
                color: 'text-primary',
                label: 'Coupon'
            };
    }
}

// Update pagination display and controls
function updatePagination(start, end, total, totalPages) {
    if (totalPages <= 1) {
        elements.paginationContainer.style.display = 'none';
        return;
    }
    
    elements.paginationContainer.style.display = 'block';
    
    // Update pagination info
    if (elements.showingStart) elements.showingStart.textContent = start;
    if (elements.showingEnd) elements.showingEnd.textContent = end;
    if (elements.totalCoupons) elements.totalCoupons.textContent = total;
    
    // Generate pagination controls
    generatePaginationControls(totalPages);
}

// Generate pagination controls
function generatePaginationControls(totalPages) {
    if (!elements.paginationControls) return;
    
    elements.paginationControls.innerHTML = '';
    
    // Previous button
    const prevLi = document.createElement('li');
    prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
    prevLi.innerHTML = `
        <a class="page-link" href="#" onclick="changePage(${currentPage - 1})" aria-label="Previous">
            <span aria-hidden="true">&laquo;</span>
        </a>
    `;
    elements.paginationControls.appendChild(prevLi);
    
    // Page numbers
    const startPage = Math.max(1, currentPage - 2);
    const endPage = Math.min(totalPages, currentPage + 2);
    
    if (startPage > 1) {
        const li = document.createElement('li');
        li.className = 'page-item';
        li.innerHTML = `<a class="page-link" href="#" onclick="changePage(1)">1</a>`;
        elements.paginationControls.appendChild(li);
        
        if (startPage > 2) {
            const dotsLi = document.createElement('li');
            dotsLi.className = 'page-item disabled';
            dotsLi.innerHTML = '<span class="page-link">...</span>';
            elements.paginationControls.appendChild(dotsLi);
        }
    }
    
    for (let i = startPage; i <= endPage; i++) {
        const li = document.createElement('li');
        li.className = `page-item ${i === currentPage ? 'active' : ''}`;
        li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
        elements.paginationControls.appendChild(li);
    }
    
    if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
            const dotsLi = document.createElement('li');
            dotsLi.className = 'page-item disabled';
            dotsLi.innerHTML = '<span class="page-link">...</span>';
            elements.paginationControls.appendChild(dotsLi);
        }
        
        const li = document.createElement('li');
        li.className = 'page-item';
        li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${totalPages})">${totalPages}</a>`;
        elements.paginationControls.appendChild(li);
    }
    
    // Next button
    const nextLi = document.createElement('li');
    nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
    nextLi.innerHTML = `
        <a class="page-link" href="#" onclick="changePage(${currentPage + 1})" aria-label="Next">
            <span aria-hidden="true">&raquo;</span>
        </a>
    `;
    elements.paginationControls.appendChild(nextLi);
}

// Change page
function changePage(page) {
    if (page < 1 || page > Math.ceil(filteredCoupons.length / couponsPerPage)) return;
    currentPage = page;
    renderCoupons();
    
    // Scroll to top of coupons section
    elements.couponsGrid.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

// Show coupon detail modal
async function showCouponDetail(couponId) {
    try {
        console.log('Loading coupon detail for ID:', couponId);
        
        // Find coupon in local data
        const coupon = allCoupons.find(c => c.id == couponId);
        if (coupon) {
            renderCouponDetailModal(coupon);
            
            // Show modal
            const modal = new bootstrap.Modal(elements.couponDetailModal);
            modal.show();
        } else {
            AuthService.showMessage('Coupon not found', 'error');
        }
        
    } catch (error) {
        console.error('Error loading coupon detail:', error);
        AuthService.showMessage('Failed to load coupon details', 'error');
    }
}

// Render coupon detail in modal
function renderCouponDetailModal(coupon) {
    if (!elements.modalCouponDetailContent) return;
    
    const status = getCouponStatus(coupon);
    const statusBadge = getStatusBadge(status);
    const typeInfo = getCouponTypeInfo(coupon.couponType || 'special');
    
    // Format dates
    const createdDate = coupon.createdAt ? new Date(coupon.createdAt) : null;
    const expiryDate = coupon.validUntil ? new Date(coupon.validUntil) : null;
    
    const createdDateDisplay = createdDate ? createdDate.toLocaleString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    }) : 'N/A';
    
    const expiryDateDisplay = expiryDate ? expiryDate.toLocaleString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    }) : 'N/A';
    
    // Calculate time remaining
    const timeRemaining = expiryDate ? expiryDate - new Date() : 0;
    const daysRemaining = Math.ceil(timeRemaining / (1000 * 60 * 60 * 24));
    
    elements.modalCouponDetailContent.innerHTML = `
        <div class="coupon-detail-content">
            <div class="row mb-4">
                <div class="col-md-8">
                    <div class="d-flex align-items-center mb-3">
                        <i class="${typeInfo.icon} me-2 ${typeInfo.color} fa-2x"></i>
                        <div>
                            <h4 class="mb-0">${coupon.name}</h4>
                            <span class="text-muted">${typeInfo.label}</span>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 text-end">
                    ${statusBadge}
                </div>
            </div>
            
            <div class="coupon-code-section text-center mb-4 p-4 bg-light rounded">
                <h3 class="discount-display mb-2">${coupon.discountPercentage}% OFF</h3>
                <div class="coupon-code-display">
                    <label class="form-label">Coupon Code</label>
                    <div class="input-group">
                        <input type="text" class="form-control text-center fw-bold" value="${coupon.code}" readonly id="coupon-code-input">
                        <button class="btn btn-outline-primary" type="button" onclick="copyCouponCodeToClipboard('${coupon.code}')">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="coupon-info">
                <h6 class="mb-3"><i class="fas fa-info-circle me-2"></i>Coupon Information</h6>
                <div class="row">
                    <div class="col-md-6">
                        <div class="info-item mb-3">
                            <label class="info-label">Discount Amount</label>
                            <div class="info-value">${coupon.discountPercentage}% off your purchase</div>
                        </div>
                        <div class="info-item mb-3">
                            <label class="info-label">Created Date</label>
                            <div class="info-value">${createdDateDisplay}</div>
                        </div>
                        <div class="info-item mb-3">
                            <label class="info-label">Coupon Type</label>
                            <div class="info-value">${typeInfo.label}</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="info-item mb-3">
                            <label class="info-label">Expiry Date</label>
                            <div class="info-value">${expiryDateDisplay}</div>
                        </div>
                        <div class="info-item mb-3">
                            <label class="info-label">Status</label>
                            <div class="info-value">${statusBadge}</div>
                        </div>
                        ${daysRemaining > 0 ? `
                            <div class="info-item mb-3">
                                <label class="info-label">Time Remaining</label>
                                <div class="info-value text-warning">${daysRemaining} day${daysRemaining !== 1 ? 's' : ''} left</div>
                            </div>
                        ` : ''}
                    </div>
                </div>
            </div>
            
            ${coupon.isAutoGenerated ? `
                <div class="alert alert-info mt-4">
                    <i class="fas fa-trophy me-2"></i>
                    <strong>Loyalty Reward!</strong> This coupon was automatically generated as a reward for your loyalty.
                </div>
            ` : ''}
        </div>
    `;
    
    // Show/hide action buttons
    if (elements.copyCouponCodeBtn) {
        elements.copyCouponCodeBtn.style.display = 'inline-block';
        elements.copyCouponCodeBtn.dataset.couponCode = coupon.code;
    }
    
    if (elements.useCouponBtn) {
        if (status === 'active') {
            elements.useCouponBtn.style.display = 'inline-block';
            elements.useCouponBtn.dataset.couponId = coupon.id;
            elements.useCouponBtn.dataset.couponCode = coupon.code;
        } else {
            elements.useCouponBtn.style.display = 'none';
        }
    }
}

// Copy coupon code to clipboard
function copyCouponCodeToClipboard(code) {
    navigator.clipboard.writeText(code).then(() => {
        AuthService.showMessage('Coupon code copied to clipboard!', 'success');
    }).catch(() => {
        // Fallback for older browsers
        const input = document.getElementById('coupon-code-input');
        if (input) {
            input.select();
            document.execCommand('copy');
            AuthService.showMessage('Coupon code copied to clipboard!', 'success');
        }
    });
}

// Copy coupon code (button handler)
function copyCouponCode() {
    const code = elements.copyCouponCodeBtn.dataset.couponCode;
    if (code) {
        copyCouponCodeToClipboard(code);
    }
}

// Show use coupon modal
function showUseCouponModal() {
    const couponId = elements.useCouponBtn.dataset.couponId;
    const couponCode = elements.useCouponBtn.dataset.couponCode;
    
    if (couponId && couponCode) {
        showUseCouponForm(parseInt(couponId));
        
        // Close detail modal
        const detailModal = bootstrap.Modal.getInstance(elements.couponDetailModal);
        if (detailModal) {
            detailModal.hide();
        }
    }
}

// Show use coupon form
function showUseCouponForm(couponId) {
    const coupon = allCoupons.find(c => c.id == couponId);
    if (!coupon) {
        AuthService.showMessage('Coupon not found', 'error');
        return;
    }
    
    if (getCouponStatus(coupon) !== 'active') {
        AuthService.showMessage('This coupon is no longer active', 'error');
        return;
    }
    
    // Render use coupon form
    if (elements.modalUseCouponContent) {
        elements.modalUseCouponContent.innerHTML = `
            <div class="use-coupon-form">
                <div class="coupon-preview text-center mb-4 p-3 bg-light rounded">
                    <h5>${coupon.name}</h5>
                    <div class="coupon-code">${coupon.code}</div>
                    <div class="discount-preview">${coupon.discountPercentage}% OFF</div>
                </div>
                
                <div class="mb-3">
                    <label for="booking-amount" class="form-label">
                        <i class="fas fa-dollar-sign me-2"></i>Booking Amount
                    </label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="booking-amount" 
                               placeholder="Enter your booking amount" min="0" step="0.01" required>
                    </div>
                    <div class="form-text">Enter the total amount of your booking to see the discount.</div>
                </div>
                
                <div class="discount-calculation" id="discount-calculation" style="display: none;">
                    <div class="alert alert-success">
                        <div class="row">
                            <div class="col-6">
                                <strong>Original Amount:</strong><br>
                                <span id="original-amount">$0.00</span>
                            </div>
                            <div class="col-6">
                                <strong>Discount (${coupon.discountPercentage}%):</strong><br>
                                <span id="discount-amount" class="text-success">$0.00</span>
                            </div>
                        </div>
                        <hr>
                        <div class="text-center">
                            <strong>Final Amount: <span id="final-amount" class="text-success fs-5">$0.00</span></strong>
                        </div>
                    </div>
                </div>
                
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Note:</strong> This is a preview calculation. The actual discount will be applied when you use this coupon during checkout.
                </div>
            </div>
        `;
        
        // Add event listener for amount input
        const amountInput = document.getElementById('booking-amount');
        if (amountInput) {
            amountInput.addEventListener('input', function() {
                updateDiscountCalculation(parseFloat(this.value) || 0, coupon.discountPercentage);
            });
        }
        
        // Store coupon data for processing
        elements.confirmUseCouponBtn.dataset.couponId = coupon.id;
        elements.confirmUseCouponBtn.dataset.couponCode = coupon.code;
        elements.confirmUseCouponBtn.dataset.discountPercentage = coupon.discountPercentage;
    }
    
    // Show modal
    const modal = new bootstrap.Modal(elements.useCouponModal);
    modal.show();
}

// Update discount calculation
function updateDiscountCalculation(amount, discountPercentage) {
    const calculationDiv = document.getElementById('discount-calculation');
    const originalAmountSpan = document.getElementById('original-amount');
    const discountAmountSpan = document.getElementById('discount-amount');
    const finalAmountSpan = document.getElementById('final-amount');
    
    if (amount > 0) {
        const discountAmount = amount * (discountPercentage / 100);
        const finalAmount = amount - discountAmount;
        
        originalAmountSpan.textContent = `$${amount.toFixed(2)}`;
        discountAmountSpan.textContent = `-$${discountAmount.toFixed(2)}`;
        finalAmountSpan.textContent = `$${finalAmount.toFixed(2)}`;
        
        calculationDiv.style.display = 'block';
    } else {
        calculationDiv.style.display = 'none';
    }
}

// Process use coupon
async function processUseCoupon() {
    try {
        const couponId = elements.confirmUseCouponBtn.dataset.couponId;
        const couponCode = elements.confirmUseCouponBtn.dataset.couponCode;
        const amountInput = document.getElementById('booking-amount');
        const bookingAmount = parseFloat(amountInput.value);
        
        if (!bookingAmount || bookingAmount <= 0) {
            AuthService.showMessage('Please enter a valid booking amount', 'error');
            return;
        }
        
        // Set loading state
        elements.confirmUseCouponBtn.disabled = true;
        elements.confirmUseCouponBtn.innerHTML = `
            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            Processing...
        `;
        
        // Call use coupon mutation
        const result = await AuthService.graphqlRequest(
            COUPON_MUTATIONS.USE_COUPON,
            {
                code: couponCode,
                bookingAmount: bookingAmount
            },
            true
        );
        
        if (result.errors) {
            throw new Error(result.errors[0].message);
        }
        
        const useCouponData = result.data?.useCoupon;
        if (useCouponData?.success) {
            AuthService.showMessage(useCouponData.message, 'success');
            
            // Close modal
            const modal = bootstrap.Modal.getInstance(elements.useCouponModal);
            modal.hide();
            
            // Reload coupons data
            await loadCouponsData();
            
        } else {
            throw new Error(useCouponData?.message || 'Failed to use coupon');
        }
        
    } catch (error) {
        console.error('Error using coupon:', error);
        AuthService.showMessage(`Failed to use coupon: ${error.message}`, 'error');
    } finally {
        // Reset button state
        elements.confirmUseCouponBtn.disabled = false;
        elements.confirmUseCouponBtn.innerHTML = `
            <i class="fas fa-check me-2"></i>Apply Coupon
        `;
    }
}

// Handle login requirement
function showLoginRequired() {
    elements.loadingContainer.style.display = 'none';
    elements.couponsGrid.style.display = 'none';
    elements.emptyState.style.display = 'none';
    elements.errorState.style.display = 'block';
    elements.paginationContainer.style.display = 'none';
    
    if (elements.errorMessage) {
        elements.errorMessage.innerHTML = `
            <div class="text-center">
                <i class="fas fa-sign-in-alt fa-3x text-primary mb-3"></i>
                <h4>Login Required</h4>
                <p>Please login to view your coupons and loyalty rewards.</p>
                <a href="/login" class="btn btn-primary">
                    <i class="fas fa-sign-in-alt me-2"></i>Login Now
                </a>
            </div>
        `;
    }
}

// Utility function for debouncing
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Global functions for inline event handlers
window.showCouponDetail = showCouponDetail;
window.showUseCouponForm = showUseCouponForm;
window.changePage = changePage;
window.copyCouponCodeToClipboard = copyCouponCodeToClipboard;

// Export for testing and debugging
window.CouponsPage = {
    COUPON_FIELDS,
    COUPON_QUERIES,
    COUPON_MUTATIONS,
    loadCouponsData,
    loadLoyaltyInfo,
    renderCoupons,
    createCouponCard,
    showCouponDetail,
    showUseCouponForm,
    processUseCoupon,
    applyFilters,
    clearAllFilters,
    changePage
};

console.log('Coupons.js loaded successfully with full schema consistency');